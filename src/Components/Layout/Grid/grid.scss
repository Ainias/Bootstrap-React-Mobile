@import "../../../scss/variables";
@import "bootstrap/scss/mixins/breakpoints";

$columns: 12;
$breakpoints: $grid-breakpoints;

.grid {
  display: grid;
  grid-template-rows: repeat(var(--grid-rows, 1), 1fr);
  grid-template-columns: repeat(var(--grid-columns, $columns), 1fr);
  gap: var(--grid-gap, 0);

  .item {
    padding: 4px;
  }

  @each $breakpoint in map-keys($breakpoints) {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        .item-#{$breakpoint}-#{$i} {
          grid-column: auto / span $i;
        }
      }

      // Start with `1` because `0` is and invalid value.
      // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
      @for $i from 1 through ($columns - 1) {
        .start-#{$breakpoint}-#{$i} {
          grid-column-start: $i;
        }
      }
    }

    // Add classes for reordering
    @include media-breakpoint-only($breakpoint, $breakpoints) {
      @for $i from -10 through 10 {
        .order-#{$breakpoint}-#{$i} {
          order: $i;
        }
      }
    }
  }

  @media print {
    @for $i from 1 through $columns {
      .item-print-#{$i} {
        grid-column: auto / span $i;
      }
    }

    // Start with `1` because `0` is and invalid value.
    // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
    @for $i from 1 through ($columns - 1) {
      .start-print-#{$i} {
        grid-column-start: $i;
      }
    }

    // Add classes for reordering
    @for $i from -10 through 10 {
      .order-print-#{$i} {
        order: $i;
      }
    }
  }
}
